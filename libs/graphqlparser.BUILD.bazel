
filegroup(
    name = "pyfiles",
    srcs = glob([
        "ast/*.py"
    ]),
)

genrule (
    name = "two2three",
    srcs = [":pyfiles"],
    outs = ["ast/ast3.py"],
    cmd = "for i in $(locations :pyfiles); do touch $@ && echo $$i && python -mlib2to3 -w $$i; done" 
)


genrule(
  name = "ast_h",
  srcs = ["ast/ast3.py", "ast/ast.py", "ast/ast.ast"],
  outs = ["Ast.h"],

  cmd = "python $(location ast/ast.py) cxx $(location ast/ast.ast) > $@"
)

genrule(
  name = "ast_visitor_h",
  srcs = ["ast/ast3.py", "ast/ast.py", "ast/ast.ast"],
  outs = ["AstVisitor.h"],

  cmd = "python $(location ast/ast.py) cxx_visitor $(location ast/ast.ast) > $@"
)

genrule(
  name = "ast_cpp",
  srcs = ["ast/ast3.py", "ast/ast.py", "ast/ast.ast"],
  outs = ["Ast.cpp"],

  cmd = "python $(location ast/ast.py) cxx_impl $(location ast/ast.ast) > $@"
)

genrule(
  name = "json_visitor_h_inc",
  srcs = ["ast/ast3.py", "ast/ast.py", "ast/ast.ast"],
  outs = ["JsonVisitor.h.inc"],

  cmd = "python $(location ast/ast.py) cxx_json_visitor_header $(location ast/ast.ast) > $@"
)

genrule(
  name = "cxx_json_visitor_impl",
  srcs = ["ast/ast3.py", "ast/ast.py", "ast/ast.ast"],
  outs = ["JsonVisitor.cpp.inc"],

  cmd = "python $(location ast/ast.py) cxx_json_visitor_impl $(location ast/ast.ast) > $@"
)



cc_library(
    name = "libgraphql",
    hdrs = glob([
        "parsergen/*.h*",
    ]) + [
        ":two2three",
        ":ast_h",
        ":ast_visitor_h",
        ":ast_cpp",
        ":json_visitor_h_inc",
        ":cxx_json_visitor_impl",

        
        "parser.tab.hpp",
        "JSONVisitor.h",
        "GraphQLParser.h",
        "lexer.h",
        "location.hh",
        "position.hh",
        "ASTNode.h",
        "stack.hh",
        "syntaxdefs.h",
    ],
    defines = [
        "YY_NO_UNISTD_H"
    ],
    includes = ["parsergen"],
    srcs = glob([
        "parsergen/*.c*",
    ]) + [
        "GraphQLParser.cpp",
        "JsonVisitor.cpp",
        "Ast.cpp",
        "JsonVisitor.cpp.inc",
        "parser.tab.cpp",
        "lexer.cpp",
    ],

    copts = select({
        "@bazel_tools//src/conditions:windows": ["/FI io.h"],
        "//conditions:default": [],
    }),

    visibility = ["//visibility:public"],
)

cc_binary(
    name="dumpjson",
    deps= [
        ":libgraphql"
    ],
    srcs=["dump_json_ast.cpp"]

)